@page "/shipment-registered/{trackingNumber}"
@using MailSystem.Http.Exceptions
@inject IAuthenticationService AuthenticationService;
@inject IShipmentHttpClient ShipmentHttpClient;
@inject IShipmentEventHttpClient ShipmentEventHttpClient;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JsRuntime;

<div class="container">
    <div class="card">
        <div class="card-body">
            <div class="row">
                <div class="col-md-6 offset-md-3">
                    <h2 class="mb-3">Siuntos patvirtinimas</h2>
                    <p>
                        Jūsų siuntos numeris: <b>@TrackingNumber</b>.
                    </p>
                    <p>
                        Pristatykite siuntą į artimiausią paštomatą.
                    </p>
                    @if (shipmentId.HasValue)
                    {
                        <div class="d-flex justify-content-center mb-2">
                            <button type="button" class="btn btn-primary" @onclick="GetPdf">Atsisiųsti PDF</button>
                        </div>
                    }
                    <div class="d-flex justify-content-center">
                        <a href="/" class="btn btn-primary">Grįžti į pradžią</a>
                    </div>
                    <img src="img/box.png" alt="Box image" class="w-100 mb-4">
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string TrackingNumber { get; set; }
    private Guid? shipmentId;

    protected override async Task OnInitializedAsync()
    {
        await AuthenticationService.OnlyUser();
        try
        {
            var shipmentEvents = await ShipmentEventHttpClient.GetEventsByTrackingId(TrackingNumber);
            shipmentId = shipmentEvents.First()?.ShipmentId;
        }
        catch (ServerRequestException)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task GetPdf()
    {
        if (!shipmentId.HasValue)
            return;
        
        var pdfStream = await ShipmentHttpClient.GetPdf(shipmentId.Value);
        await JsRuntime.InvokeVoidAsync("BlazorDownloadFile", "shipment.pdf", "application/octet-stream", pdfStream);
    }
}